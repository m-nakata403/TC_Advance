 class Beverage
  @@tax = 0.1
  attr_reader :name, :price
  
  def initialize(args)
    @name = args.fetch(:name, 'サイダー')
    @price = args.fetch(:price, 120)
  end
  
  def price
    @price + (@price * @@tax).floor
  end
 end
  
 class Tabaco
  @@tax = 0.6
  attr_reader :brand, :cost
  
  def initialize(args)
    @name = args.fetch(:brand, 'テックタバコ')
    @price = args.fetch(:cost, 300)
  end
  
  def price
    @price + (@price * @@tax).floor
  end
 end
  
 class VendingMachine
  attr_reader :products
  
  def initialize(products)
    @products = products
  end
  
  def transaction
    display_anounce
    product = take_order
    serve_item(product)
  end
  
  private
  
  attr_reader :products
  
  def display_anounce
    puts '購入したい商品を以下から選んで、金額を入力してください'
    products.each_with_index do |product, i|
      case product
      when Beverage
        puts "[#{i}] 商品名：#{product.name} 税込み価格：#{product.price}円"
      else
        puts "[#{i}] 商品名：#{product.brand} 税込み価格：#{product.cost}円"
      end
    end
  end
  
  def take_order
    product = products[gets.to_i]
    case product
    when Beverage
      puts "#{product.name}が選択されました"
    else
      puts "#{product.brand}が選択されました"
    end
    
    product
  end
  
  def serve_item(product)
    # 適正金額が受け取れるまで繰り返す。
    while true do
      payment = gets.to_i
      charge = calc_change(payment, product.price)
      if charge >= 0
        break
      else
        puts "入力金額が不足しています。金額を再入力してください。"
      end
    end
  
    puts "お釣りは#{charge}円です。ご利用ありがとうございました。"
  end
  
  def calc_change(payment, price)
    payment - price
  end
 end
  
 tabacos = [
  { name: '第一タバコ', price: 120 },
  { name: 'サムライ', price: 100 },
  { name: 'キャッツアイ', price: 80 }
 ]
  
 @tabacos = tabacos.map{ |b| Tabaco.new(name: b[:name], price: b[:price]) }
 vm = VendingMachine.new(@tabacos)
 vm.transaction
